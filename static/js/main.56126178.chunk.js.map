{"version":3,"sources":["HttpClient.js","serviceWorker.js","components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","containers/App.js","index.js"],"names":["http","require","exports","makeGetRequest","options","callback","request","response","data","on","chunk","JSON","parse","end","Boolean","window","location","hostname","match","Card","props","className","alt","src","id","name","email","CardList","cardComponent","robots","map","user","key","SearchBox","type","placeholder","onChange","e","onSearchFieldChange","target","value","Scroll","style","overflowY","children","httpClient","App","useState","setRobots","setSearchField","updateData","useEffect","host","path","method","length","searchField","filter","item","toLowerCase","includes","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"4KAAA,IAAIA,EAAOC,EAAQ,IAGnBC,EAAQC,eAAiB,SAACC,EAASC,GAClCL,EAAKM,QAAQF,GAAS,SAASG,GAC9B,IAAIC,EAAM,GACVD,EAASE,GAAG,QAAQ,SAASC,GAC5BF,GAAOE,KAERH,EAASE,GAAG,OAAO,WAClBJ,EAASM,KAAKC,MAAMJ,UAEnBK,Q,wHCAgBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,iBCJSC,EAZF,SAACC,GACb,OACC,yBAAKC,UAAU,uDACd,yBAAKC,IAAI,SAASC,IAAG,+BAA0BH,EAAMZ,KAAKgB,GAArC,cACrB,6BACC,4BAAKJ,EAAMZ,KAAKiB,MAChB,2BAAIL,EAAMZ,KAAKkB,UCOJC,EAZE,SAAC,GAAY,IACvBC,EADsB,EAAVC,OACWC,KAAI,SAAAC,GAChC,OAAO,kBAAC,EAAD,CAAMC,IAAG,eAAUD,EAAKP,IAAMhB,KAAMuB,OAG5C,OACC,6BACEH,ICOWK,EAfG,SAACb,GAKlB,OACC,2BACCC,UAAU,wEACVa,KAAK,SACLC,YAAY,gBACZC,SAT0B,SAACC,GAC5BjB,EAAMkB,oBAAoBD,EAAEE,OAAOC,WCMtBC,EARA,SAACrB,GACf,OACC,yBAAKsB,MAAO,CAACC,UAAW,SAAU,OAAU,UAC1CvB,EAAMwB,WCCNC,G,MAAa5C,EAAQ,KAsCV6C,EApCH,WAAO,IAAD,EACWC,mBAAS,IADpB,mBACVlB,EADU,KACFmB,EADE,OAEqBD,mBAAS,IAF9B,mBAEGE,GAFH,WAWXC,EAAa,SAAC1C,GACnBwC,EAAUxC,IAWX,OARA2C,qBAAU,WACTN,EAAW1C,eAAe,CACzBiD,KAAM,gCACNC,KAAM,QACNC,OAAQ,OACNJ,MAGGrB,EAAO0B,QAAS,EACrB,uCAEA,yBAAKlC,UAAU,MACd,wBAAIA,UAAU,MAAd,eACA,kBAAC,EAAD,CAAWiB,oBAxBc,SAACkB,GAC5BP,EAAeO,GACfR,EAAUnB,EAAO4B,QAAO,SAASC,GAC/B,OAAOA,EAAKjC,KAAKkC,cAAcC,SAASJ,EAAYG,sBAsBpD,kBAAC,EAAD,KACC,kBAAC,EAAD,CAAU9B,OAAQA,OC/BvBgC,IAASC,OACR,kBAAC,EAAD,MACCC,SAASC,eAAe,SN0HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.56126178.chunk.js","sourcesContent":["var http = require('http');\r\n\r\n\r\nexports.makeGetRequest = (options, callback) =>{\r\n\thttp.request(options, function(response){\r\n\t\tvar data= \"\";\r\n\t\tresponse.on('data', function(chunk){\r\n\t\t\tdata+= chunk;\r\n\t\t});\r\n\t\tresponse.on(\"end\", function(){\r\n\t\t\tcallback(JSON.parse(data));\r\n\t\t})\r\n\t}).end();\r\n};","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\n\r\nconst Card = (props) => {\r\n\treturn (\r\n\t\t<div className=\"tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5\">\r\n\t\t\t<img alt=\"robots\" src={`https://robohash.org/${props.data.id}?200x200`} />\r\n\t\t\t<div>\r\n\t\t\t\t<h2>{props.data.name}</h2>\r\n\t\t\t\t<p>{props.data.email}</p>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default Card;","import React from 'react';\r\nimport Card from './Card';\r\n\r\nconst CardList = ({robots})=>{\r\n\tconst cardComponent = robots.map(user => {\r\n\t\treturn <Card key={`user_${user.id}`} data={user}/>\r\n\t});\r\n\r\n\treturn (\r\n\t\t<div>\r\n\t\t\t{cardComponent}\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default CardList;","import React from 'react';\r\n\r\nconst SearchBox = (props) => {\r\n\tconst onSearchFieldChange = (e) => {\r\n\t\tprops.onSearchFieldChange(e.target.value);\r\n\t};\r\n\r\n\treturn (\r\n\t\t<input \r\n\t\t\tclassName='pa2 ma4 input-reset ba bg-transparent hover-bg-black hover-white w-30' \r\n\t\t\ttype='search' \r\n\t\t\tplaceholder='Search robots' \r\n\t\t\tonChange={onSearchFieldChange}\r\n\t\t/>\r\n\t);\r\n};\r\n\r\nexport default SearchBox;\t\r\n","import React from 'react';\r\n\r\nconst Scroll = (props) => {\r\n\treturn (\r\n\t\t<div style={{overflowY: 'scroll', 'height': '700px'}}>\r\n\t\t\t{props.children}\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default Scroll;","import React, {useState, useEffect} from 'react';\r\nimport CardList from '../components/CardList';\r\nimport SearchBox from '../components/SearchBox';\r\nimport {robots} from '../robots.js';\r\nimport Scroll from '../components/Scroll';\r\nimport './App.css';\r\nvar httpClient = require('../HttpClient');\r\n\r\nconst App = () => {\r\n\tconst [robots, setRobots] = useState([]);\r\n\tconst [searchField, setSearchField] = useState('');\r\n\r\n\tconst onSearchFieldChange = (searchField) => {\r\n\t\tsetSearchField(searchField);\r\n\t\tsetRobots(robots.filter(function(item){\r\n\t\t\t\treturn item.name.toLowerCase().includes(searchField.toLowerCase())\r\n\t\t\t}));\r\n\t}\r\n\r\n\tconst updateData = (data) => {\r\n\t\tsetRobots(data);\r\n\t}\r\n\r\n\tuseEffect(()=> {\r\n\t\thttpClient.makeGetRequest({\r\n\t\t\thost: 'jsonplaceholder.typicode.com/',\r\n\t\t\tpath: 'users',\r\n\t\t\tmethod: 'GET'\r\n\t\t}, updateData);\r\n\t});\r\n\r\n\treturn robots.length <=0 ?\r\n\t\t\t<h1>Loading</h1>:\r\n\t\t\t(\r\n\t\t\t<div className='tc'>\r\n\t\t\t\t<h1 className=\"f2\">RoboFriends</h1>\r\n\t\t\t\t<SearchBox onSearchFieldChange= {onSearchFieldChange}/>\r\n\t\t\t\t<Scroll>\r\n\t\t\t\t\t<CardList robots={robots}/>\r\n\t\t\t\t</Scroll>\r\n\t\t\t</div>\r\n\t\t);\r\n};\r\n\r\nexport default App;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport 'tachyons';\r\nimport App from '././containers/App';\r\n\r\nReactDOM.render(\r\n\t<App/>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}